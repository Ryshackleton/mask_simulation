{"version":3,"sources":["hooks/useSimulation/simulation.worker.js","hooks/useInterval/index.js","hooks/useSimulation/constants.js","hooks/useSimulation/renderUtils.js","hooks/useSimulation/index.js","components/Canvas/Canvas2d.js","hooks/useCanvas/index.js","components/VirusStackedArea/VirusStackedArea.jsx","components/VirusCounts/VirusCounts.jsx","components/MultiSimulationContainer/MultiSimulationContainer.jsx","components/MaskSimulation/MaskSimulation.jsx","components/MaskSimulation/MaskSimulationContainer.jsx","App.js","index.js"],"names":["addMethods","methods","module","exports","w","Worker","name","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","SIMULATION_RUN_STATE","DISEASE","INFECTED","SUSCEPTIBLE","RECOVERED","MASK","MASK_ATTACK_REDUCTION","COLOR_BY_DISEASE","LABEL_BY_DISEASE","ICON_BY_DISEASE","ICON_BY_MASK","STROKE_WIDTH_BY_MASK","STROKE_COLOR_BY_MASK","DEFAULT_SIMULATION_PROPS","attackSuccessProbability","drawNodesAsIcons","historyInterval","percentSociallyDistant","nNodes","radius","ticksToRecover","velocity","DEFAULT_VIRUS_SIMULATION_PROPS","title","maskedType","nInfected","percentMasked","maskTransmissionReduction","defaultFillFunction","disease_status","defaultStrokeFunction","mask_status","defaultStrokeWidthFunction","drawCircle","ctx","node","fill","stroke","strokeWidth","beginPath","arc","x","y","Math","PI","save","strokeStyle","lineWidth","restore","fillStyle","ICON_FONT","drawIcon","icon","radiusScale","font","fillText","defaultIconFunction","noop","Canvas2d","onClick","className","drawFunction","height","width","canvasPixelRatio","onMouseDown","onMouseMove","onMouseUp","style","onTouchEnd","onTouchMove","onTouchStart","canvasRef","draw","ratio","canvas","getContext","animationFrameId","requestAnimationFrame","clearRect","scale","cancelAnimationFrame","useCanvas","sizeInPixels","ref","VirusStackedArea","handleMouseMove","handleTouchMove","handleMouseLeave","containerHeight","margin","top","left","bottom","right","transitionDuration","fullHistory","virusHistory","containerWidth","useMemo","interval","String","length","subsampled","i","push","xScale","maxTick","max","tick","scaleLinear","domain","range","yScale","series","stack","keys","areasRef","useLayoutEffect","areaGen","area","d","data","y0","y1","select","selectAll","join","attr","key","onMouseLeave","viewBox","preserveAspectRatio","overflow","transform","diseaseOrdered","Object","values","reverse","VirusCounts","final","totalInfected","map","color","STASIS_REACHED","RUNNING","PAUSED","MultiSimulationContainer","simulationState","positionNodes","runState","virusSimulations","handleClick","interactionMessage","virusNodes","nodes","fillFunction","iconFunction","radiusMultiplier","forEach","index","drawIcons","strokeFunction","strokeWidthFunction","drawCircles","ontouchend","Simulation","simulationProps","useState","setSimulationState","fontLoading","useAsync","a","document","fonts","load","loading","wrapDenom","min","onSimulationTicked","tickInterval","worker","setWorker","postMessage","action","sim","SimulationWorker","addEventListener","event","useSimulation","useCallback","MaskSimulationContainer","HEALTHY_COLOR","INFECTED_COLOR","RECOVERED_COLOR","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1917824a.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = []\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"6550be473adc37541b05.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","/** copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/ */\nimport { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","export const SIMULATION_RUN_STATE = {\n  RUNNING: 0,\n  PAUSED: 1,\n  STASIS_REACHED: 2,\n};\n\nexport const DISEASE = {\n  INFECTED: 0,\n  SUSCEPTIBLE: 1,\n  RECOVERED: 2,\n};\n\nexport const MASK = {\n  NO_MASK: 0,\n  NON_MEDICAL: 1,\n  MEDICAL: 2,\n};\n\nexport const MASK_ATTACK_REDUCTION = {\n  [MASK.NO_MASK]: 1, // 1 = no change in transmissivity\n  [MASK.NON_MEDICAL]: 0.67,\n  [MASK.MEDICAL]: 0.55\n};\n\nexport const COLOR_BY_DISEASE = {\n  [DISEASE.INFECTED]: \"#BB641D\",\n  [DISEASE.SUSCEPTIBLE]: \"#AAC6CA\",\n  [DISEASE.RECOVERED]: \"#CB8AC0\",\n};\n\nexport const LABEL_BY_DISEASE = {\n  [DISEASE.INFECTED]: 'Infected',\n  [DISEASE.SUSCEPTIBLE]: 'Healthy',\n  [DISEASE.RECOVERED]: 'Recovered',\n};\n\nconst defaultIcon = '\\uf406'; // fa user icon\nexport const ICON_BY_DISEASE = {\n  [DISEASE.INFECTED]: '\\uf961', // coughing\n  [DISEASE.SUSCEPTIBLE]: defaultIcon, // default\n  [DISEASE.RECOVERED]: defaultIcon, // default\n};\n\nexport const ICON_BY_MASK = {\n  [MASK.NO_MASK]: defaultIcon, // default\n  [MASK.NON_MEDICAL]: '\\uf963', // mask\n  [MASK.MEDICAL]: defaultIcon, // default\n};\n\nexport const STROKE_WIDTH_BY_MASK = {\n  [MASK.NO_MASK]: 0,\n  [MASK.NON_MEDICAL]: 3,\n  [MASK.MEDICAL]: 4\n};\n\nexport const STROKE_COLOR_BY_MASK = {\n  [MASK.NO_MASK]: '#fff',\n  [MASK.NON_MEDICAL]: '#000',\n  [MASK.MEDICAL]: '#000'\n};\n\nexport const DEFAULT_SIMULATION_PROPS = {\n  attackSuccessProbability: 0.05,\n  drawNodesAsIcons: true,\n  historyInterval: 3,\n  percentSociallyDistant: 0,\n  nNodes: 50,\n  radius: 6,\n  ticksToRecover: 1000,\n  velocity: 3.5,\n};\n\nexport const DEFAULT_VIRUS_SIMULATION_PROPS = {\n  title: '',\n  maskedType: MASK.NON_MEDICAL,\n  nInfected: 2,\n  percentMasked: 0,\n  maskTransmissionReduction: MASK_ATTACK_REDUCTION,\n};\n","import { COLOR_BY_DISEASE, ICON_BY_DISEASE, ICON_BY_MASK, MASK, STROKE_COLOR_BY_MASK, STROKE_WIDTH_BY_MASK } from './constants';\n\nconst defaultFillFunction = ({ disease_status }) => COLOR_BY_DISEASE[disease_status];\nconst defaultStrokeFunction = ({ mask_status }) => STROKE_COLOR_BY_MASK[mask_status];\nconst defaultStrokeWidthFunction = ({ mask_status }) =>\n  STROKE_WIDTH_BY_MASK[mask_status];\n\nexport function drawCircle(ctx, node, fill, stroke, strokeWidth = 2) {\n  ctx.beginPath();\n  ctx.arc(node.x, node.y, node.radius - (strokeWidth ? strokeWidth / 2 : 0), 0, Math.PI * 2, false);\n\n  if (strokeWidth > 0) {\n    ctx.save();\n    ctx.strokeStyle = stroke || 'none';\n    ctx.lineWidth = strokeWidth;\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  ctx.fillStyle = fill;\n  ctx.strokeStyle = stroke || 'none';\n  ctx.fill();\n}\n\nexport function drawCircles(\n  ctx,\n  nodes,\n  virusNodes,\n  fillFunction = defaultFillFunction,\n  strokeFunction = defaultStrokeFunction,\n  strokeWidthFunction = defaultStrokeWidthFunction,\n) {\n  nodes.forEach((node, index) =>\n    drawCircle(\n      ctx,\n      node,\n      fillFunction(virusNodes[index]),\n      strokeFunction(virusNodes[index]),\n      strokeWidthFunction(virusNodes[index])\n    )\n  );\n}\n\nexport const ICON_FONT = 'Font Awesome 5 Free';\nexport const ICON_FONT_WEIGHT = 900;\nexport function drawIcon(ctx, node, fill, icon = '\\uf007', radiusScale = 3) {\n  const radius = node.radius * radiusScale;\n  ctx.font = `${ICON_FONT_WEIGHT} ${radius}px \"${ICON_FONT}\"`;\n  ctx.fillStyle = fill;\n  ctx.fillText(icon, node.x - radius / 2, node.y + radius / 2);\n}\n\nconst defaultIconFunction = ({ disease_status, mask_status }) => (\n  mask_status === MASK.NO_MASK ? ICON_BY_DISEASE[disease_status] : ICON_BY_MASK[mask_status]\n);\nexport function drawIcons(\n  ctx,\n  nodes,\n  virusNodes,\n  fillFunction = defaultFillFunction,\n  iconFunction = defaultIconFunction,\n  radiusMultiplier = 3,\n) {\n  nodes.forEach((node, index) =>\n    drawIcon(\n      ctx,\n      node,\n      fillFunction(virusNodes[index]),\n      iconFunction(virusNodes[index]),\n      radiusMultiplier,\n    )\n  );\n}\n","import { useState, useEffect } from 'react';\nimport useInterval from '../useInterval';\nimport SimulationWorker from 'workerize-loader!./simulation.worker'; // eslint-disable-line import/no-webpack-loader-syntax\n\nexport * from './renderUtils';\nexport * from './constants';\n\nfunction noop() {}\n\nexport default function useSimulation(simulationProps, onSimulationTicked = noop, tickInterval = 10)  {\n  const [worker, setWorker] = useState(null);\n\n  useInterval(() => {\n    if (worker) {\n      worker.postMessage({ action: 'TICK' });\n    }\n  }, tickInterval);\n\n  useEffect(() => {\n    if (!worker) {\n      const sim = new SimulationWorker();\n      sim.postMessage({\n        action: 'NEW_SIMULATION',\n        ...simulationProps,\n      });\n      sim.addEventListener('message', event => {\n        onSimulationTicked(event.data);\n      });\n      setWorker(sim);\n    }\n  }, [worker, setWorker, onSimulationTicked, simulationProps]);\n\n  return [worker, setWorker];\n}\n","import React from 'react';\nimport { useCanvas } from '../../hooks';\n\nexport default function Canvas2d({\n  onClick,\n  className,\n  drawFunction = () => {},\n  height = 500,\n  width = 500,\n  canvasPixelRatio = 2,\n  onMouseDown,\n  onMouseMove,\n  onMouseUp,\n  style = {},\n  onTouchEnd,\n  onTouchMove,\n  onTouchStart,\n}) {\n  const canvasRef = useCanvas(drawFunction, canvasPixelRatio);\n  const sizeInPixels = { width: `${width}px`, height: `${height}px` };\n  return <canvas\n    className={className}\n    width={width * canvasPixelRatio}\n    height={height * canvasPixelRatio}\n    style={{ ...sizeInPixels, ...style }}\n    ref={canvasRef}\n    onTouchStart={onTouchStart}\n    onTouchMove={onTouchMove}\n    onTouchEnd={onTouchEnd}\n    onMouseMove={onMouseMove}\n    onMouseDown={onMouseDown}\n    onMouseUp={onMouseUp}\n    onClick={onClick}\n  />;\n}\n\n","import { useRef, useEffect } from \"react\";\n\nexport default function useCanvas(draw, ratio = 1) {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    function renderFrame() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.save();\n      ctx.scale(ratio, ratio);\n      draw(ctx);\n      ctx.restore();\n    }\n    const animationFrameId = requestAnimationFrame(renderFrame);\n\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [draw, ratio]);\n\n  return canvasRef;\n}\n\n","import React, { useLayoutEffect, useMemo, useRef } from 'react';\nimport { area, scaleLinear, select, stack } from 'd3';\n\nimport { COLOR_BY_DISEASE, DISEASE } from '../../hooks/useSimulation';\nimport './VirusStackedArea.scss';\n\nconst { INFECTED, SUSCEPTIBLE, RECOVERED } = DISEASE;\n\nexport default function VirusStackedArea({\n  handleMouseMove,\n  handleTouchMove,\n  handleMouseLeave,\n  height: containerHeight,\n  margin = { top: 5, left: 5, bottom: 5, right: 5 },\n  transitionDuration = 1000,\n  virusHistory: fullHistory,\n  nNodes,\n  width: containerWidth,\n}) {\n  const [virusHistory] = useMemo(() => {\n    const interval = (String(fullHistory.length).length) * 2 || 1;\n    const subsampled = [];\n    for(let i = 0; i < fullHistory.length; i = i + interval) {\n      subsampled.push(fullHistory[i]);\n    }\n    return [subsampled];\n  }, [fullHistory]);\n  const [height, width] = useMemo(() => {\n    return [\n      containerHeight - margin.top - margin.bottom,\n      containerWidth - margin.left - margin.right,\n    ];\n  }, [containerWidth, containerHeight, margin]);\n\n  const xScale = useMemo(() => {\n    if (virusHistory.length) {\n      const maxTick = Math.max(\n        virusHistory[virusHistory.length - 1].tick,\n        2000,\n      );\n      return scaleLinear().domain([0, maxTick]).range([0, width])\n    }\n    return scaleLinear();\n  }, [virusHistory, width]);\n\n  const yScale = useMemo(() => {\n    return scaleLinear()\n    .domain([0, nNodes])\n    .range([height, 0]);\n  }, [nNodes, height]);\n\n  const series = useMemo(() => {\n    return stack().keys([INFECTED, SUSCEPTIBLE, RECOVERED])(virusHistory);\n  }, [virusHistory]);\n\n  const areasRef = useRef();\n\n  /* -------- Render Lines/Labels/Areas -------- */\n  useLayoutEffect(() => {\n    // console.log(xScale.domain(), xScale.range());\n    const areaGen = area()\n      .x(d => xScale(d.data.tick))\n      .y0(d => yScale(d[0]))\n      .y1(d => yScale(d[1]))\n\n    select(areasRef.current)\n      .selectAll('path')\n      .data(series)\n      .join('path')\n      .attr('d', areaGen)\n      .attr(\"fill\", ({ key }) => COLOR_BY_DISEASE[key])\n    }, [series, areasRef, transitionDuration, xScale, yScale]);\n\n  return (\n    <div className=\"stacked-area-chart-wrapper\" >\n      <svg\n        onMouseMove={handleMouseMove}\n        onTouchMove={handleTouchMove}\n        onMouseLeave={handleMouseLeave}\n        onTouchEnd={handleMouseLeave}\n        height=\"100%\"\n        width=\"100%\"\n        viewBox={`0 0 ${containerWidth} ${containerHeight}`}\n        preserveAspectRatio=\"none\"\n        overflow=\"hidden\">\n        <g transform={`translate(${margin.left}, ${margin.top})`} ref={areasRef} />\n      </svg>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { COLOR_BY_DISEASE, DISEASE, LABEL_BY_DISEASE } from '../../hooks/useSimulation';\nimport './VirusCounts.scss';\n\nconst diseaseOrdered = Object.values(DISEASE).reverse();\n\nexport default function VirusCounts({\n  height: containerHeight,\n  virusHistory: fullHistory,\n}) {\n  const final = fullHistory && fullHistory.length ? fullHistory[fullHistory.length - 1] : {};\n  const totalInfected = (final[DISEASE.RECOVERED] || 0) + (final[DISEASE.INFECTED] || 0);\n\n  return <div className=\"virus-count-container\" style={{ height: containerHeight }} >\n    {\n      diseaseOrdered.map((id) => (\n        <span key={id} style={{ color: COLOR_BY_DISEASE[id] }} className=\"virus-count-label\" >\n          {LABEL_BY_DISEASE[id]}: <strong>{final[id]}</strong>\n        </span>\n      ))\n    }\n    {\n      <span key={'total'} style={{ color: COLOR_BY_DISEASE[DISEASE.INFECTED] }} className=\"virus-count-label\" >\n          Total infections: <strong>{totalInfected}</strong>\n        </span>\n    }\n  </div>;\n}\n","import React, { useMemo } from 'react';\nimport Canvas2d from '../Canvas/Canvas2d';\nimport { drawIcons, drawCircles, SIMULATION_RUN_STATE } from '../../hooks/useSimulation';\n\nimport './MultiSimlulationContainer.scss';\nimport { VirusStackedArea } from '../VirusStackedArea';\nimport { VirusCounts } from '../VirusCounts';\n\nconst { STASIS_REACHED, RUNNING, PAUSED } = SIMULATION_RUN_STATE;\n\nexport default function MultiSimulationContainer({\n  drawNodesAsIcons = false,\n  height = 400,\n  simulationState: {\n    positionNodes = [],\n    runState,\n    tick,\n    virusSimulations,\n  } = {},\n  handleClick,\n}) {\n  const interactionMessage = useMemo(() => {\n    if (runState === STASIS_REACHED) {\n      return '(touch to start a new simulation)';\n    } else if (runState === RUNNING) {\n      return '(touch to pause simulation)';\n    } else if (runState === PAUSED && tick === 0) {\n      return '(touch to start simulation)';\n    } else if (runState === PAUSED) {\n      return '(touch to resume simulation)';\n    }\n    return '';\n  }, [runState, tick]);\n\n  const drawFunction = useMemo(() => {\n    return drawNodesAsIcons\n      ? ({ positionNodes = [], virusNodes = [] }) => (ctx) =>\n          drawIcons(ctx, positionNodes, virusNodes)\n      : ({ positionNodes = [], virusNodes = [] }) => (ctx) =>\n          drawCircles(ctx, positionNodes, virusNodes);\n  }, [drawNodesAsIcons]);\n\n  return <div className=\"multi-simulation-container\" >\n    {\n      virusSimulations\n      && virusSimulations.map(({ title, percentMasked, virusHistory, virusNodes }, index) => (\n        <div className=\"simulation-group-container\" key={`sim-canvas-${index}`} >\n          <div\n            className=\"simulation-canvas-labels\"\n            onClick={handleClick}\n          >\n            <span className=\"simulation-title\">{title || `${percentMasked}% mask use`}</span>\n            <span className=\"interaction-label\">{interactionMessage}</span>\n          </div>\n          <div style={{ width: height, height }} className=\"simulation-canvas-wrapper\">\n            <Canvas2d\n              className=\"simulation-canvas\"\n              drawFunction={drawFunction({ positionNodes, virusNodes })}\n              onClick={handleClick}\n              ontouchend={handleClick}\n              height={height}\n              width={height}\n            />\n          </div>\n          <div className=\"stacked-area-with-labels-container\" style={{ width: height }}>\n            <VirusCounts\n              virusHistory={virusHistory}\n              height={60}\n            />\n            <VirusStackedArea\n              nNodes={virusNodes.length}\n              virusHistory={virusHistory}\n              height={60}\n              width={height}\n            />\n          </div>\n        </div>\n      ))}\n  </div>;\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  useSimulation,\n  DEFAULT_SIMULATION_PROPS,\n  DEFAULT_VIRUS_SIMULATION_PROPS,\n  ICON_FONT,\n  SIMULATION_RUN_STATE, ICON_FONT_WEIGHT,\n} from '../../hooks';\nimport { MultiSimulationContainer } from '../MultiSimulationContainer';\nimport { useAsync } from 'react-use';\n\nconst { STASIS_REACHED, RUNNING, PAUSED } = SIMULATION_RUN_STATE;\n\nexport default function Simulation({\n  simulationProps: {\n    drawNodesAsIcons,\n    ...simulationProps\n  } = {\n    ...DEFAULT_SIMULATION_PROPS,\n    virusSimulations: [{ ...DEFAULT_VIRUS_SIMULATION_PROPS,  title: 'No mask use' }],\n  },\n  height: containerHeight = 400,\n  margin = { top: 0, left: 0, bottom: 0, right: 0 },\n  width: containerWidth = 400,\n}) {\n  const [simulationState, setSimulationState] = useState({});\n  const { loading: fontLoading } = useAsync(async () => (drawNodesAsIcons\n    ? document.fonts.load(`${ICON_FONT_WEIGHT} 14px \"${ICON_FONT}\"`)\n    : { loading: false }\n  ), [ICON_FONT, drawNodesAsIcons]);\n\n  const [height, width] = useMemo(() => {\n    const isMobile = containerWidth > 600;\n    const wrapDenom = isMobile ? 2 : 1;\n    // make space square\n    const min = Math.min(\n      containerHeight - margin.top - margin.bottom,\n      (containerWidth - (margin.left - margin.right) * wrapDenom) / wrapDenom\n    );\n    return [min, min];\n  }, [containerHeight, containerWidth, margin]);\n\n  const [worker] = useSimulation({ height, width, ...simulationProps }, setSimulationState);\n\n  useEffect(() => {\n    if (worker) {\n      worker.postMessage({ action: 'RESIZE', height, width });\n    }\n  }, [height, width, worker]);\n\n  const handleClick = useCallback(() => {\n    if (simulationState.runState === STASIS_REACHED) {\n      worker.postMessage({ action: 'NEW_SIMULATION', height, width, ...simulationProps });\n    } else if (simulationState.runState === RUNNING) {\n      worker.postMessage({ action: 'PAUSE' });\n    } else if (simulationState.runState === PAUSED) {\n      worker.postMessage({ action: 'RESUME' });\n    }\n  }, [worker, height, width, simulationProps, simulationState]);\n\n  return !fontLoading && <MultiSimulationContainer\n    drawNodesAsIcons={drawNodesAsIcons}\n    simulationState={simulationState}\n    handleClick={handleClick}\n    height={height}\n    width={width}\n  />;\n};\n","import React from 'react';\nimport MaskSimulation from './MaskSimulation';\nimport './MaskSimulationContainer.scss';\n\nexport default function MaskSimulationContainer({ simulationProps }) {\n  return (\n    <div className=\"mask-simulation-container\" >\n      <MaskSimulation simulationProps={simulationProps} />\n    </div>\n  );\n}\n\n","import React from 'react';\nimport './App.css';\nimport { MaskSimulation } from './components';\nimport {\n  COLOR_BY_DISEASE,\n  DEFAULT_SIMULATION_PROPS,\n  DEFAULT_VIRUS_SIMULATION_PROPS,\n  DISEASE,\n} from './hooks/useSimulation';\n\nconst PERCENT_SOCIALLY_DISTANT = 75;\nconst HEALTHY_COLOR = COLOR_BY_DISEASE[DISEASE.SUSCEPTIBLE];\nconst INFECTED_COLOR = COLOR_BY_DISEASE[DISEASE.INFECTED];\nconst RECOVERED_COLOR = COLOR_BY_DISEASE[DISEASE.RECOVERED];\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"section\">\n        <h2 className=\"title\">Basic probability based transmission model</h2>\n        <div className=\"editorial-text\">This simulation demonstrates the concepts that mask use in the general population helps\n          flatten the curve by lowering the overall rate of virus transmission.  If we take a base\n          transmission rate of 5% probability of virus transmission in nodes that come in contact,\n          we see the following scenario. Healthy, Infected, and Recovered individuals are denoted as follows:\n          <ul>\n            <li>Healthy (susceptible): <i style={{ color: HEALTHY_COLOR }} className=\"fas fa-user editorial-icon\"></i></li>\n            <li>Infected (contagious): <i style={{ color: INFECTED_COLOR }} className=\"fas fa-head-side-cough editorial-icon\"></i></li>\n            <li>Recovered (immune & not contagious): <i style={{ color: RECOVERED_COLOR }} className=\"fas fa-user editorial-icon\"></i></li>\n          </ul>\n        </div>\n        <div className=\"editorial-text\"><strong>Click/touch the gray box to start/stop/reset simulations</strong></div>\n        <MaskSimulation simulationProps={{\n          ...DEFAULT_SIMULATION_PROPS,\n          virusSimulations: [\n            {\n              ...DEFAULT_VIRUS_SIMULATION_PROPS,\n              title: '5% transmission, no masks',\n              percentMasked: 0,\n            },\n          ],\n        }} />\n      </div>\n      <div className=\"section\">\n        <h2 className=\"title\">No masks vs 95% mask use</h2>\n        <div className=\"editorial-text\">Now lets run two simulations like the one above that have\n          the same contacts for each node and the same transmission probabilities, but now we'll\n          add masks to one simulation. <strong>Masked individuals are denoted by the{' '}\n          <i className=\"fas fa-head-side-mask editorial-icon\"></i> icon</strong>, while their color\n          denotes infection status as above:\n          <ul>\n            <li>Healthy (no mask): <i style={{ color: HEALTHY_COLOR }} className=\"fas fa-user editorial-icon\"></i>\n              , (masked): <i style={{ color: HEALTHY_COLOR }}className=\"fas fa-head-side-mask editorial-icon\"></i></li>\n            <li>Infected (no mask): <i style={{ color: INFECTED_COLOR }} className=\"fas fa-head-side-cough editorial-icon\"></i>\n              , (masked): <i style={{ color: INFECTED_COLOR }}className=\"fas fa-head-side-mask editorial-icon\"></i></li>\n            <li>Recovered (no mask): <i style={{ color: RECOVERED_COLOR }} className=\"fas fa-user editorial-icon\"></i>\n              , (masked): <i style={{ color: RECOVERED_COLOR }}className=\"fas fa-head-side-mask editorial-icon\"></i></li>\n          </ul>\n        </div>\n        <div className=\"editorial-text\">Here we assume that the masks reduce the probability of virus\n          transmission by 33% for both the infected person and the healthy person. See how the model\n          changes.\n        </div>\n        <MaskSimulation simulationProps={{\n          ...DEFAULT_SIMULATION_PROPS,\n          virusSimulations: [\n            {\n              ...DEFAULT_VIRUS_SIMULATION_PROPS,\n              title: 'No mask use',\n              percentMasked: 0,\n            },\n            {\n              ...DEFAULT_VIRUS_SIMULATION_PROPS,\n              title: '95% mask use',\n              percentMasked: 95,\n            }\n          ],\n        }}/>\n      </div>\n      <div className=\"section\">\n        <h2 className=\"title\">Masks with Social Distancing really flattens the curve</h2>\n        <div className=\"editorial-text\">Partial social distancing can be mimicked by requiring\n          certain nodes to stay fixed, resulting in fewer contacts with other nodes. Here's a\n          scenario where, <strong>in both cases, {PERCENT_SOCIALLY_DISTANT}% of the nodes are\n          socially distant</strong>. Although the motions of still-moving nodes are different for\n          the simulations above, the curves should generally be flatter for the socially distant\n          simulations than for simulations where all nodes are moving.\n        </div>\n        <MaskSimulation simulationProps={{\n          ...DEFAULT_SIMULATION_PROPS,\n          percentSociallyDistant: PERCENT_SOCIALLY_DISTANT,\n          virusSimulations: [\n            {\n              ...DEFAULT_VIRUS_SIMULATION_PROPS,\n              title: `No mask use, ${PERCENT_SOCIALLY_DISTANT}% social distancing`,\n              percentMasked: 0,\n            },\n            {\n              ...DEFAULT_VIRUS_SIMULATION_PROPS,\n              title: `95% mask use, ${PERCENT_SOCIALLY_DISTANT}% social distancing`,\n              percentMasked: 95,\n            }\n          ],\n        }}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}