{"version":3,"sources":["hooks/useSimulation/simulation.worker.js","hooks/useInterval/index.js","hooks/useSimulation/constants.js","hooks/useSimulation/renderUtils.js","hooks/useSimulation/index.js","components/Canvas/Canvas2d.js","hooks/useCanvas/index.js","components/VirusStackedArea/VirusStackedArea.jsx","components/VirusCounts/VirusCounts.jsx","components/MultiSimulationContainer/MultiSimulationContainer.jsx","components/MaskSimulation/MaskSimulation.jsx","components/MaskSimulation/MaskSimulationContainer.jsx","App.js","serviceWorker.js","index.js"],"names":["addMethods","methods","module","exports","w","Worker","name","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","DISEASE","INFECTED","SUSCEPTIBLE","RECOVERED","MASK","MASK_ATTACK_REDUCTION","COLOR_BY_DISEASE","LABEL_BY_DISEASE","STROKE_WIDTH_BY_MASK","STROKE_COLOR_BY_MASK","DEFAULT_SIMULATION_PROPS","attackSuccessProbability","historyInterval","percentSociallyDistant","nNodes","radius","ticksToRecover","velocity","DEFAULT_VIRUS_SIMULATION_PROPS","title","maskedType","nInfected","percentMasked","maskTransmissionReduction","defaultFillFunction","disease_status","defaultStrokeFunction","mask_status","defaultStrokeWidthFunction","drawNode","ctx","node","fill","stroke","strokeWidth","beginPath","arc","x","y","Math","PI","save","strokeStyle","lineWidth","restore","fillStyle","noop","Canvas2d","onClick","className","drawFunction","height","width","canvasPixelRatio","onMouseDown","onMouseMove","onMouseUp","style","onTouchEnd","onTouchMove","onTouchStart","canvasRef","draw","ratio","canvas","getContext","animationFrameId","requestAnimationFrame","clearRect","scale","cancelAnimationFrame","useCanvas","sizeInPixels","ref","VirusStackedArea","handleMouseMove","handleTouchMove","handleMouseLeave","containerHeight","margin","top","left","bottom","right","transitionDuration","fullHistory","virusHistory","containerWidth","useMemo","interval","String","length","subsampled","i","push","xScale","maxTick","max","tick","scaleLinear","domain","range","yScale","series","stack","keys","areasRef","useLayoutEffect","areaGen","area","d","data","y0","y1","select","selectAll","join","attr","key","onMouseLeave","viewBox","preserveAspectRatio","overflow","transform","diseaseOrdered","Object","values","reverse","VirusCounts","final","map","color","positionNodes","virusNodes","nodes","fillFunction","strokeFunction","strokeWidthFunction","forEach","index","drawNodes","MultiSimulationContainer","simulationState","isRunning","isStasisReached","virusSimulations","handleClick","interactionMessage","ontouchend","Simulation","simulationProps","useState","setSimulationState","wrapDenom","min","onSimulationTicked","tickInterval","worker","setWorker","postMessage","action","sim","SimulationWorker","addEventListener","event","useSimulation","useCallback","MaskSimulationContainer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8d17c53a.chunk.js","sourcesContent":["\n\t\t\t\tvar addMethods = require(\"../../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = []\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"a6b3ad9f3d29a065af12.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","/** copied from https://overreacted.io/making-setinterval-declarative-with-react-hooks/ */\nimport { useEffect, useRef } from 'react';\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","export const DISEASE = {\n  INFECTED: 0,\n  SUSCEPTIBLE: 1,\n  RECOVERED: 2,\n};\n\nexport const MASK = {\n  NO_MASK: 0,\n  NON_MEDICAL: 1,\n  MEDICAL: 2,\n};\n\nexport const MASK_ATTACK_REDUCTION = {\n  [MASK.NO_MASK]: 1, // 1 = no change in transmissivity\n  [MASK.NON_MEDICAL]: 0.67,\n  [MASK.MEDICAL]: 0.55\n};\n\nexport const COLOR_BY_DISEASE = {\n  [DISEASE.INFECTED]: \"#BB641D\",\n  [DISEASE.SUSCEPTIBLE]: \"#AAC6CA\",\n  [DISEASE.RECOVERED]: \"#CB8AC0\",\n};\n\nexport const LABEL_BY_DISEASE = {\n  [DISEASE.INFECTED]: 'Infected',\n  [DISEASE.SUSCEPTIBLE]: 'Healthy',\n  [DISEASE.RECOVERED]: 'Recovered',\n};\n\nexport const STROKE_WIDTH_BY_MASK = {\n  [MASK.NO_MASK]: 0,\n  [MASK.NON_MEDICAL]: 3,\n  [MASK.MEDICAL]: 4\n};\n\nexport const STROKE_COLOR_BY_MASK = {\n  [MASK.NO_MASK]: '#fff',\n  [MASK.NON_MEDICAL]: '#000',\n  [MASK.MEDICAL]: '#000'\n};\n\nexport const DEFAULT_SIMULATION_PROPS = {\n  attackSuccessProbability: 0.05,\n  historyInterval: 3,\n  percentSociallyDistant: 0,\n  nNodes: 60,\n  radius: 7,\n  ticksToRecover: 1000,\n  velocity: 3.5,\n};\n\nexport const DEFAULT_VIRUS_SIMULATION_PROPS = {\n  title: '',\n  maskedType: MASK.NON_MEDICAL,\n  nInfected: 3,\n  percentMasked: 0,\n  maskTransmissionReduction: MASK_ATTACK_REDUCTION,\n};\n","import { COLOR_BY_DISEASE, STROKE_COLOR_BY_MASK, STROKE_WIDTH_BY_MASK } from './constants';\n\nconst defaultFillFunction = ({ disease_status }) => COLOR_BY_DISEASE[disease_status];\nconst defaultStrokeFunction = ({ mask_status }) => STROKE_COLOR_BY_MASK[mask_status];\nconst defaultStrokeWidthFunction = ({ mask_status }) =>\n  STROKE_WIDTH_BY_MASK[mask_status];\n\nexport function drawNode(ctx, node, fill, stroke, strokeWidth = 2) {\n  ctx.beginPath();\n  ctx.arc(node.x, node.y, node.radius - (strokeWidth ? strokeWidth / 2 : 0), 0, Math.PI * 2, false);\n\n  if (strokeWidth > 0) {\n    ctx.save();\n    ctx.strokeStyle = stroke || 'none';\n    ctx.lineWidth = strokeWidth;\n    ctx.stroke();\n    ctx.restore();\n  }\n\n  ctx.fillStyle = fill;\n  ctx.strokeStyle = stroke || 'none';\n  ctx.fill();\n}\n\nexport function drawNodes(\n  ctx,\n  nodes,\n  virusNodes,\n  fillFunction = defaultFillFunction,\n  strokeFunction = defaultStrokeFunction,\n  strokeWidthFunction = defaultStrokeWidthFunction,\n) {\n  nodes.forEach((node, index) =>\n    drawNode(\n      ctx,\n      node,\n      fillFunction(virusNodes[index]),\n      strokeFunction(virusNodes[index]),\n      strokeWidthFunction(virusNodes[index])\n    )\n  );\n}\n","import { useState, useEffect } from 'react';\nimport useInterval from '../useInterval';\nimport SimulationWorker from 'workerize-loader!./simulation.worker'; // eslint-disable-line import/no-webpack-loader-syntax\n\nexport * from './renderUtils';\nexport * from './constants';\n\nfunction noop() {}\n\nexport default function useSimulation(simulationProps, onSimulationTicked = noop, tickInterval = 10)  {\n  const [worker, setWorker] = useState(null);\n\n  useInterval(() => {\n    if (worker) {\n      worker.postMessage({ action: 'TICK' });\n    }\n  }, tickInterval);\n\n  useEffect(() => {\n    if (!worker) {\n      const sim = new SimulationWorker();\n      sim.postMessage({\n        action: 'NEW_SIMULATION',\n        ...simulationProps,\n      });\n      sim.addEventListener('message', event => {\n        onSimulationTicked(event.data);\n      });\n      setWorker(sim);\n    }\n  }, [worker, setWorker, onSimulationTicked, simulationProps]);\n\n  return [worker, setWorker];\n}\n","import React from 'react';\nimport { useCanvas } from '../../hooks';\n\nexport default function Canvas2d({\n  onClick,\n  className,\n  drawFunction = () => {},\n  height = 500,\n  width = 500,\n  canvasPixelRatio = 2,\n  onMouseDown,\n  onMouseMove,\n  onMouseUp,\n  style = {},\n  onTouchEnd,\n  onTouchMove,\n  onTouchStart,\n}) {\n  const canvasRef = useCanvas(drawFunction, canvasPixelRatio);\n  const sizeInPixels = { width: `${width}px`, height: `${height}px` };\n  return <canvas\n    className={className}\n    width={width * canvasPixelRatio}\n    height={height * canvasPixelRatio}\n    style={{ ...sizeInPixels, ...style }}\n    ref={canvasRef}\n    onTouchStart={onTouchStart}\n    onTouchMove={onTouchMove}\n    onTouchEnd={onTouchEnd}\n    onMouseMove={onMouseMove}\n    onMouseDown={onMouseDown}\n    onMouseUp={onMouseUp}\n    onClick={onClick}\n  />;\n}\n\n","import { useRef, useEffect } from \"react\";\n\nexport default function useCanvas(draw, ratio = 1) {\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    function renderFrame() {\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.save();\n      ctx.scale(ratio, ratio);\n      draw(ctx);\n      ctx.restore();\n    }\n    const animationFrameId = requestAnimationFrame(renderFrame);\n\n    return () => cancelAnimationFrame(animationFrameId);\n  }, [draw, ratio]);\n\n  return canvasRef;\n}\n\n","import React, { useLayoutEffect, useMemo, useRef } from 'react';\nimport { area, scaleLinear, select, stack } from 'd3';\n\nimport { COLOR_BY_DISEASE, DISEASE } from '../../hooks/useSimulation';\nimport './VirusStackedArea.scss';\n\nconst { INFECTED, SUSCEPTIBLE, RECOVERED } = DISEASE;\n\nexport default function VirusStackedArea({\n  handleMouseMove,\n  handleTouchMove,\n  handleMouseLeave,\n  height: containerHeight,\n  margin = { top: 5, left: 5, bottom: 5, right: 5 },\n  transitionDuration = 1000,\n  virusHistory: fullHistory,\n  nNodes,\n  width: containerWidth,\n}) {\n  const [virusHistory] = useMemo(() => {\n    const interval = (String(fullHistory.length).length) * 2 || 1;\n    const subsampled = [];\n    for(let i = 0; i < fullHistory.length; i = i + interval) {\n      subsampled.push(fullHistory[i]);\n    }\n    return [subsampled];\n  }, [fullHistory]);\n  const [height, width] = useMemo(() => {\n    return [\n      containerHeight - margin.top - margin.bottom,\n      containerWidth - margin.left - margin.right,\n    ];\n  }, [containerWidth, containerHeight, margin]);\n\n  const xScale = useMemo(() => {\n    if (virusHistory.length) {\n      const maxTick = Math.max(\n        virusHistory[virusHistory.length - 1].tick,\n        2000,\n      );\n      return scaleLinear().domain([0, maxTick]).range([0, width])\n    }\n    return scaleLinear();\n  }, [virusHistory, width]);\n\n  const yScale = useMemo(() => {\n    return scaleLinear()\n    .domain([0, nNodes])\n    .range([height, 0]);\n  }, [nNodes, height]);\n\n  const series = useMemo(() => {\n    return stack().keys([INFECTED, SUSCEPTIBLE, RECOVERED])(virusHistory);\n  }, [virusHistory]);\n\n  const areasRef = useRef();\n\n  /* -------- Render Lines/Labels/Areas -------- */\n  useLayoutEffect(() => {\n    // console.log(xScale.domain(), xScale.range());\n    const areaGen = area()\n      .x(d => xScale(d.data.tick))\n      .y0(d => yScale(d[0]))\n      .y1(d => yScale(d[1]))\n\n    select(areasRef.current)\n      .selectAll('path')\n      .data(series)\n      .join('path')\n      .attr('d', areaGen)\n      .attr(\"fill\", ({ key }) => COLOR_BY_DISEASE[key])\n    }, [series, areasRef, transitionDuration, xScale, yScale]);\n\n  return (\n    <div className=\"stacked-area-chart-wrapper\" >\n      <svg\n        onMouseMove={handleMouseMove}\n        onTouchMove={handleTouchMove}\n        onMouseLeave={handleMouseLeave}\n        onTouchEnd={handleMouseLeave}\n        height=\"100%\"\n        width=\"100%\"\n        viewBox={`0 0 ${containerWidth} ${containerHeight}`}\n        preserveAspectRatio=\"none\"\n        overflow=\"hidden\">\n        <g transform={`translate(${margin.left}, ${margin.top})`} ref={areasRef} />\n      </svg>\n    </div>\n  );\n}\n","import React from 'react';\n\nimport { COLOR_BY_DISEASE, DISEASE, LABEL_BY_DISEASE } from '../../hooks/useSimulation';\nimport './VirusCounts.scss';\n\nconst diseaseOrdered = Object.values(DISEASE).reverse();\n\nexport default function VirusCounts({\n  height: containerHeight,\n  virusHistory: fullHistory,\n}) {\n  const final = fullHistory && fullHistory.length ? fullHistory[fullHistory.length - 1] : {};\n\n  return <div className=\"virus-count-container\" style={{ height: containerHeight }} >\n    {\n      diseaseOrdered.map((id) => (\n        <span key={id} style={{ color: COLOR_BY_DISEASE[id] }} className=\"virus-count-label\" >\n          {LABEL_BY_DISEASE[id]}: <strong>{final[id]}</strong>\n        </span>\n      ))\n    }\n  </div>;\n}\n","import React, { useMemo } from 'react';\nimport Canvas2d from '../Canvas/Canvas2d';\nimport { drawNodes } from '../../hooks/useSimulation';\n\nimport './MultiSimlulationContainer.scss';\nimport { VirusStackedArea } from '../VirusStackedArea';\nimport { VirusCounts } from '../VirusCounts';\n\nconst drawFunction = ({\n  positionNodes = [],\n  virusNodes = []\n}) => ((ctx) => drawNodes(ctx, positionNodes, virusNodes));\n\nexport default function MultiSimulationContainer({\n  height = 400,\n  simulationState: {\n    isRunning,\n    isStasisReached,\n    positionNodes = [],\n    tick,\n    virusSimulations,\n  } = {},\n  handleClick,\n}) {\n  const interactionMessage = useMemo(() => {\n    if (isStasisReached) {\n      return '(touch to start a new simulation)';\n    } else if (isRunning === true) {\n      return '(touch to pause simulation)';\n    } else if (isRunning === false && tick === 0) {\n      return '(touch to start simulation)';\n    } else if (isRunning === false) {\n      return '(touch to resume simulation)';\n    }\n    return '';\n  }, [isRunning, isStasisReached, tick]);\n\n  return <div className=\"multi-simulation-container\" >\n    {\n      virusSimulations\n      && virusSimulations.map(({ title, percentMasked, virusHistory, virusNodes }, index) => (\n        <div className=\"simulation-group-container\" key={`sim-canvas-${index}`} >\n          <div\n            className=\"simulation-canvas-labels\"\n            onClick={handleClick}\n          >\n            <span className=\"simulation-title\">{title || `${percentMasked}% mask use`}</span>\n            <span className=\"interaction-label\">{interactionMessage}</span>\n          </div>\n          <div style={{ width: height, height }} className=\"simulation-canvas-wrapper\">\n            <Canvas2d\n              className=\"simulation-canvas\"\n              drawFunction={drawFunction({ positionNodes, virusNodes })}\n              onClick={handleClick}\n              ontouchend={handleClick}\n              height={height}\n              width={height}\n            />\n          </div>\n          <div className=\"stacked-area-with-labels-container\">\n            <VirusCounts\n              virusHistory={virusHistory}\n              height={60}\n            />\n            <VirusStackedArea\n              nNodes={virusNodes.length}\n              virusHistory={virusHistory}\n              height={60}\n              width={height}\n            />\n          </div>\n        </div>\n      ))}\n  </div>;\n}\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport {\n  useSimulation,\n  DEFAULT_SIMULATION_PROPS,\n  DEFAULT_VIRUS_SIMULATION_PROPS,\n} from '../../hooks';\nimport { MultiSimulationContainer } from '../MultiSimulationContainer';\n\nexport default function Simulation({\n  simulationProps = {\n    ...DEFAULT_SIMULATION_PROPS,\n    virusSimulations: [{ ...DEFAULT_VIRUS_SIMULATION_PROPS,  title: 'No mask use' }],\n  },\n  height: containerHeight = 400,\n  margin = { top: 0, left: 0, bottom: 0, right: 0 },\n  width: containerWidth = 400,\n}) {\n  const [simulationState, setSimulationState] = useState({});\n\n  const [height, width] = useMemo(() => {\n    const isMobile = containerWidth > 600;\n    const wrapDenom = isMobile ? 2 : 1;\n    // make space square\n    const min = Math.min(\n      containerHeight - margin.top - margin.bottom,\n      (containerWidth - (margin.left - margin.right) * wrapDenom) / wrapDenom\n    );\n    return [min, min];\n  }, [containerHeight, containerWidth, margin]);\n\n  const [worker] = useSimulation({ height, width, ...simulationProps }, setSimulationState);\n\n  useEffect(() => {\n    if (worker) {\n      worker.postMessage({ action: 'RESIZE', height, width });\n    }\n  }, [height, width, worker]);\n\n  const handleClick = useCallback(() => {\n    if (simulationState.isStasisReached) {\n      worker.postMessage({ action: 'NEW_SIMULATION', height, width, ...simulationProps });\n    } else if (simulationState.isRunning === true) {\n      worker.postMessage({ action: 'PAUSE' });\n    } else if (simulationState.isRunning === false) {\n      worker.postMessage({ action: 'RESUME' });\n    }\n  }, [worker, height, width, simulationProps, simulationState]);\n\n  return <MultiSimulationContainer\n    simulationState={simulationState}\n    handleClick={handleClick}\n    height={height}\n    width={width}\n  />;\n};\n","import React from 'react';\nimport MaskSimulation from './MaskSimulation';\nimport './MaskSimulationContainer.scss';\n\nexport default function MaskSimulationContainer({ simulationProps }) {\n  return (\n    <div className=\"mask-simulation-container\" >\n      <MaskSimulation simulationProps={simulationProps} />\n    </div>\n  );\n}\n\n","import React from 'react';\nimport './App.css';\nimport { MaskSimulation } from './components';\nimport { DEFAULT_SIMULATION_PROPS, DEFAULT_VIRUS_SIMULATION_PROPS } from './hooks/useSimulation';\n\nconst PERCENT_SOCIALLY_DISTANT = 75;\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"section\">\n        <h2 className=\"title\">Basic probability based transmission model</h2>\n        <div className=\"editorial-text\">This simulation demonstrates the concepts that mask use in the general population helps\n          flatten the curve by lowering the overall rate of virus transmission.  If we take a base\n          transmission rate of 5% probability of virus transmision in nodes that come in contact,\n          we see the following scenario.\n        </div>\n        <div className=\"editorial-text\"><strong>Click/touch the gray box to start/stop/reset simulations</strong></div>\n        <MaskSimulation simulationProps={{\n          ...DEFAULT_SIMULATION_PROPS,\n          virusSimulations: [\n            {\n              ...DEFAULT_VIRUS_SIMULATION_PROPS,\n              title: '5% transmission, no masks',\n              percentMasked: 0,\n            },\n          ],\n        }} />\n      </div>\n      <div className=\"section\">\n        <h2 className=\"title\">No masks vs 95% mask use</h2>\n        <div className=\"editorial-text\">Now lets run two simulations like the one above that have\n          the same contacts for each node and the same transmission probabilities, but now we'll\n          add masks to one simulation. <strong>Masked individuals are denoted by the black outlined\n          circles.</strong> Here we assume that the masks reduce the probability of virus\n          transmission by 33% for both the infected person and the healthy person. See how the model\n          changes.\n        </div>\n        <MaskSimulation simulationProps={{\n          ...DEFAULT_SIMULATION_PROPS,\n          virusSimulations: [\n            {\n              ...DEFAULT_VIRUS_SIMULATION_PROPS,\n              title: 'No mask use',\n              percentMasked: 0,\n            },\n            {\n              ...DEFAULT_VIRUS_SIMULATION_PROPS,\n              title: '95% mask use',\n              percentMasked: 95,\n            }\n          ],\n        }}/>\n      </div>\n      <div className=\"section\">\n        <h2 className=\"title\">Masks with Social Distancing really flattens the curve</h2>\n        <div className=\"editorial-text\">Partial social distancing can be mimicked by requiring\n          certain nodes to stay fixed, resulting in fewer contacts with other nodes. Here's a\n          scenario where, <strong>in both cases, {PERCENT_SOCIALLY_DISTANT}% of the nodes are\n          socially distant</strong>. Although the motions of still-moving nodes are different for\n          the simulations above, the curves should generally be flatter for the socially distant\n          simulations than for simulations where all nodes are moving.\n        </div>\n        <MaskSimulation simulationProps={{\n          ...DEFAULT_SIMULATION_PROPS,\n          percentSociallyDistant: PERCENT_SOCIALLY_DISTANT,\n          virusSimulations: [\n            {\n              ...DEFAULT_VIRUS_SIMULATION_PROPS,\n              title: `No mask use, ${PERCENT_SOCIALLY_DISTANT}% social distancing`,\n              percentMasked: 0,\n            },\n            {\n              ...DEFAULT_VIRUS_SIMULATION_PROPS,\n              title: `95% mask use, ${PERCENT_SOCIALLY_DISTANT}% social distancing`,\n              percentMasked: 95,\n            }\n          ],\n        }}/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}